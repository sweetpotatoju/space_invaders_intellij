Index: src/main/java/spaceinvaders/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spaceinvaders;\r\n\r\nimport spaceinvaders.entity.*;\r\nimport javax.swing.*;\r\nimport java.util.Timer;\r\nimport java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.image.BufferStrategy;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.Random;\r\nimport java.util.Set;\r\nimport java.util.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\nimport javax.sound.sampled.FloatControl;\r\n\r\n/**\r\n * The main hook of our game. This class with both act as a manager\r\n * for the display and central mediator for the game logic.\r\n *\r\n * Display management will consist of a loop that cycles round all\r\n * entities in the game asking them to move and then drawing them\r\n * in the appropriate place. With the help of an inner class it\r\n * will also allow the player to control the main ship.\r\n *\r\n * As a mediator it will be informed when entities within our game\r\n * detect events (e.g. alient killed, played died) and will take\r\n * appropriate game actions.\r\n *\r\n * @author Kevin Glass\r\n */\r\npublic class Game extends Canvas {\r\n\t/**\r\n\t * The stragey that allows us to use accelerate page flipping\r\n\t */\r\n\tprivate final BufferStrategy strategy;\r\n\t/**\r\n\t * True if the game is currently \"running\", i.e. the game loop is looping\r\n\t */\r\n\tprivate final boolean gameRunning = true; private boolean stageRunning = false;\r\n\t/**\r\n\t * The list of all the entities that exist in our game\r\n\t */\r\n\tprivate final ArrayList<Entity> entities = new ArrayList<>();\r\n\t/**\r\n\t * The list of entities that need to be removed from the game this loop\r\n\t */\r\n\tprivate final ArrayList<Entity> removeList = new ArrayList<Entity>();\r\n\t/** The message to display which waiting for a key press */\r\n\tprivate String message = \"\";\r\n\t/** True if we're holding up game play until a key has been pressed */\r\n\tprivate boolean waitingForKeyPress = true;\r\n\t/** True if the left cursor key is currently pressed */\r\n\tprivate Entity[] ShipCounter = new ShipEntity[2]; private boolean multiPlay;\r\n\tprivate boolean leftPressed,left2Pressed, rightPressed, right2Pressed;\r\n\tprivate boolean upPressed, up2Pressed, downPressed, down2Pressed;\r\n\tprivate int Lonly, Ronly, Uonly, Donly, LnD, RnD, LnU, RnU;\r\n\tprivate boolean firePressed, fire2Pressed, player1Dead, player2Dead;\r\n\tprivate boolean goGo, keyP1Reverse, keyP2Reverse;\r\n\t/** True if game logic needs to be applied this loop, normally as a result of a game event */\r\n\tprivate boolean logicRequiredThisLoop = false;\r\n\tprivate boolean isGameStart = false;\r\n\t/**\r\n\t * The last time at which we recorded the frame rate\r\n\t */\r\n\tprivate long lastFpsTime;\r\n\t/**\r\n\t * The current number of frames recorded\r\n\t */\r\n\tprivate int fps, cycle;\r\n\t/**\r\n\t * The normal title of the game window\r\n\t */\r\n\tprivate final String windowTitle = \"Space Invaders 102\";\r\n\t/**\r\n\t * The game window that we'll update with the frame count\r\n\t */\r\n\tprivate final JFrame container;\r\n\tprivate int level = 1;\r\n\tprivate Timer timer;\r\n\tprivate static int genCount, alienCount;\r\n\tpublic static int killCount, liveCount;\r\n\tprivate static String bestScore = \"\";\r\n\tprivate FirebaseTool firebaseTool;\r\n\r\n\tprivate GlobalStorage globalStorage;\r\n\r\n\t//Record Variables\r\n\tprivate int tenToHundMillis, aSecond, aMinute;\r\n\t/** timedisplay */\r\n\tprivate String timeStamp=\"\";\r\n\tprivate long lastLoopTime; private long initTime;\r\n\tprivate RecordRecorder playBoard = new RecordRecorder(this);\r\n\r\n\tprivate static int alienVertSpeed=10, alienHoriSpeed=75;\r\n\tprivate JLabel backLabel;\r\n\tprivate Graphics2D userHUD;\r\n\tprivate Image image;\r\n\r\n\t/**\r\n\t * Construct our game and set it running.\r\n\t */\r\n\tpublic Game(String option) {\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic bgm = new BackgroundMusic(\"src/main/resources/audio/backgroundmusic.wav\", executorService);\r\n\t\texecutorService.execute(bgm);\r\n\r\n\t\tcycle = 0;\r\n\t\tif (option.equals(\"2p\")) {multiPlay = true; System.out.println(\"2p\");}\r\n\t\telse {multiPlay = false; System.out.println(\"1p\");}\r\n\t\t// create a frame to contain our game\r\n\t\tcontainer = new JFrame(\"Space Invaders 102\");\r\n\r\n\t\t// get hold the content of the frame and set up the resolution of the game\r\n\t\tJPanel panel = (JPanel) container.getContentPane();\r\n\t\tpanel.setPreferredSize(new Dimension(800,600));\r\n\t\tpanel.setLayout(null);\r\n\r\n\r\n\r\n//\t\t// Add background image\r\n//\t\tImageIcon backgroundImage = new ImageIcon(\"sprites/rankingPage.png\");\r\n//\t\tJLabel background = new JLabel(backgroundImage);\r\n//\t\tcontainer.add(background,BorderLayout.CENTER);\r\n\r\n\r\n\r\n\t\t/*TimeCounter timeCounter = new TimeCounter((int) 0);*/\r\n\t\t//panel.add(timeCounter);\r\n\t\t// setup our canvas size and put it into the content of the frame\r\n\t\tsetBounds(0,0,800,600);\r\n\t\tpanel.add(this);\r\n\t\t// TimeCounter 객체를 실행하는 Thread를 생성하고 시작합니다.\r\n\t\t/*timeCounterThread = new Thread(timeCounter);\r\n\t\ttimeCounterThread.start();*/\r\n\t\t// Tell AWT not to bother repainting our canvas since we're\r\n\t\t// going to do that our self in accelerated mode\r\n\t\tsetIgnoreRepaint(true);\r\n\t\t// finally make the window visible\r\n\t\tcontainer.pack();\r\n\t\tcontainer.setResizable(false);\r\n\t\tcontainer.setVisible(true);\r\n\t\t// add a listener to respond to the user closing the window. If they\r\n\t\t// do we'd like to exit the game\r\n\t\tcontainer.addWindowListener(new WindowAdapter() {\r\n\t\t\tpublic void windowClosing(WindowEvent e) {\r\n//\t\t\t\tSystem.exit(0);\r\n\t\t\t\tbgm.stop();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// add a key input system (defined below) to our canvas\r\n\t\t// so we can respond to key pressed\r\n\t\taddKeyListener(new KeyInputHandler());\r\n\t\t// request the focus so key events come to us\r\n\t\trequestFocus();\r\n\t\t// create the buffering strategy which will allow AWT\r\n\t\t// to manage our accelerated graphics\r\n\t\tcreateBufferStrategy(2);\r\n\t\tstrategy = getBufferStrategy();\r\n\t\t// initialise the entities in our game so there's something\r\n\t\t// to see at startup\r\n\t\tfirebaseTool = FirebaseTool.getInstance();\r\n\t\tglobalStorage = GlobalStorage.getInstance();\r\n\t\tgenCount = 0;\r\n\t\tkillCount = 0;\r\n\t\talienCount = 0;\r\n\t\tliveCount = 0;\r\n\t\tplayBoard.scoreInit();\r\n\t\tinitEntities();\r\n\t}\r\n\t/**\r\n\t * Start a fresh game, this should clear out any old data and\r\n\t * create a new set.\r\n\t */\r\n\tprivate void startGame() {\r\n\t\t// clear out any existing entities and intialise a new set\r\n\t\tentities.clear();\r\n\t\tinitEntities();\r\n\t\t// blank out any keyboard settings we might currently have\r\n\t\tleftPressed = false;\r\n\t\trightPressed = false;\r\n\t\tupPressed = false;\r\n\t\tdownPressed = false;\r\n\t\tfirePressed = false;\r\n\t\tplayer1Dead = false;\r\n\r\n\t\t//2P key init\r\n\t\tleft2Pressed = false;\r\n\t\tright2Pressed = false;\r\n\t\tup2Pressed = false;\r\n\t\tdown2Pressed = false;\r\n\t\tfire2Pressed = false;\r\n\t\tplayer2Dead = false;\r\n\t\ttenToHundMillis=0; aSecond=0; aMinute=0;\r\n\t\t//윈도우랑 게임창 노래 겹쳐들림\r\n//\t\tnew BackgroundMusic();\r\n\t}\r\n\tprivate void initEntities() {\r\n\t\tif (multiPlay){\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",350, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t\tShipCounter[1] = new ShipEntity(this, \"sprites/ship2p.png\",390, 550, true);\r\n\t\t\taddEntity(ShipCounter[1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tShipCounter[0] = new ShipEntity(this, \"sprites/ship1p.png\",370, 550, false);\r\n\t\t\tentities.add(ShipCounter[0]);\r\n\t\t}\r\n\t\tkillCount = 0;\r\n\t\t// create the aliens\r\n\t\tmessage =\"When you're ready, please press the button!\";\r\n\t}\r\n\tpublic void repeatGame(){\r\n\t\tif(level==4){\r\n\t\t\tsetAlienVertSpeed((int)(getAlienVertSpeed()*1.05));\r\n\t\t\tsetAlienHoriSpeed((int)(getAlienHoriSpeed()*1.05));\r\n\t\t\tstageRunning=false;\r\n\t\t\tlevel=1;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tsetAlienHoriSpeed(75);\r\n\t\t\tsetAlienVertSpeed(10);\r\n\t\t\tstageRunning=false;\r\n\t\t\tlevel=1;\r\n\t\t}\r\n\t\tgenCount=0;\r\n\t}\r\n\tprivate void createAliens() {\r\n\t\tif(waitingForKeyPress) return;\r\n\t\tstageRunning=true;\r\n\t\t// determine the parameters for the aliens based on the current level// increase the number of aliens by 2 for each level\r\n\t\talienCount = 10  + (level - 1) * 2;// increase the number of aliens by 2 for each level11\r\n\t\tif (level == 3) liveCount = 1;\r\n\t\telse liveCount = alienCount;\r\n\t\tint alienWidth = 50; // width of each alien\r\n\t\tint alienHeight = 30; // height of each alien\r\n\t\tint minY = 10; // minimum y-coordinate\r\n\t\tint maxY = 200; // maximum y-coordinate\r\n\t\tfinal Set<Point> points = new HashSet<>(); // set to keep track of the generated points\r\n\t\tRandom random = new Random();\r\n\t\twhile (points.size() < alienCount) {\r\n\t\t\tint x = random.nextInt(getWidth() - alienWidth);\r\n\t\t\tint y = random.nextInt(maxY - minY) + minY;\r\n\t\t\t// check if the new point overlaps with any existing points\r\n\t\t\tboolean overlapping = false;\r\n\t\t\tif(level == 3){break;}\r\n\t\t\tfor (Point point : points) {\r\n\t\t\t\tif (Math.abs(point.x - x) < alienWidth && Math.abs(point.y - y) < alienHeight) {\r\n\t\t\t\t\toverlapping = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// if not overlapping, add the new point to the set\r\n\t\t\tif (!overlapping) {\r\n\t\t\t\tpoints.add(new Point(x, y));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// create a timer to add aliens every delay milliseconds\r\n\t\tif (level == 1) {\r\n\t\t\tSystem.out.println(\"level 1 intro\");\r\n\t\t\tif (isGameStart) {\r\n\t\t\t\t/**\r\n\t\t\t\t * this section is added by jgs\r\n\t\t\t\t * */\r\n\t\t\t\t//initTime = lastLoopTime;\r\n\t\t\t\t//aMinute = 0;\r\n\t\t\t\t//aSecond = 0;\r\n\t\t\t\t//tenToHundMillis = 0;\r\n\t\t\t\t//goGo = true;\r\n\t\t\t}\r\n\t\t\tstageRunning = true;\r\n\t\t\tTimer timerLv1 = new Timer();\r\n\t\t\tTimerTask taskLv1 = new TimerTask() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tif (waitingForKeyPress) return;\r\n\t\t\t\t\tif (genCount < alienCount) {\r\n\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]);\r\n\t\t\t\t\t\tPoint randomPoint = pointArray[genCount];\r\n\t\t\t\t\t\tint x = randomPoint.x;\r\n\t\t\t\t\t\tint y = randomPoint.y;\r\n\t\t\t\t\t\tAlienEntity alien = new AlienEntity(Game.this, x, y);\r\n\t\t\t\t\t\talien.createLevel1Alien(Game.this, x, y);\r\n\t\t\t\t\t\taddEntity(alien);\r\n\t\t\t\t\t\tSystem.out.println(\"level 1 spawned: \" + (genCount + 1));\r\n\t\t\t\t\t\t++genCount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSystem.out.println(\"Lv1 All Spawned\");\r\n\t\t\t\t\t\ttimerLv1.cancel();\r\n\t\t\t\t\t\tgenCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttimerLv1.schedule(taskLv1, 0, 1000);\r\n\t\t}\r\n\t\telse if (level == 2){\r\n\t\t\tSystem.out.println(\"level 2 intro\");\r\n\t\t\tstageRunning = true;\r\n\t\t\tgenCount = 0;\r\n\r\n\t\t\tTimer timerLv2 = new Timer();\r\n\t\t\tTimerTask taskLv2 = new TimerTask() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tif (waitingForKeyPress) return;\r\n\t\t\t\t\tif (genCount < alienCount) {\r\n\t\t\t\t\t\tPoint[] pointArray = points.toArray(new Point[0]);\r\n\t\t\t\t\t\tPoint randomPoint = pointArray[genCount];\r\n\t\t\t\t\t\tint x = randomPoint.x;\r\n\t\t\t\t\t\tint y = randomPoint.y;\r\n\t\t\t\t\t\tAlienEntity alien = new AlienEntity(Game.this, x, y);\r\n\t\t\t\t\t\talien.createLevel2Alien(Game.this, x, y);\r\n\t\t\t\t\t\taddEntity(alien);\r\n\t\t\t\t\t\tSystem.out.println(\"level 1 spawned: \" + (genCount + 1));\r\n\t\t\t\t\t\t++genCount;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSystem.out.println(\"Lv1 All Spawned\");\r\n\t\t\t\t\t\ttimerLv2.cancel();\r\n\t\t\t\t\t\tgenCount = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttimerLv2.schedule(taskLv2, 0, 1000);\r\n\t\t}\r\n\t\telse if (level == 3) {\r\n\t\t\tSystem.out.println(\"level 3 intro\");\r\n\t\t\tif(waitingForKeyPress)return;\r\n\t\t\tstageRunning = true;\r\n\t\t\tBossEntity boss = new BossEntity(this, \"sprites/boss2.png\", getWidth() / 2, 50);\r\n\t\t\tentities.add(boss);\r\n\t\t}\r\n\t}\r\n\tpublic void updateLogic() {\r\n\t\tlogicRequiredThisLoop = true;\r\n\t}\r\n\t/**\r\n\t * Remove an entity from the game. The entity removed will\r\n\t * no longer move or be drawn.\r\n\t *\r\n\t * @param entity The entity that should be removed\r\n\t */\r\n\tpublic void removeEntity(Entity entity) {\r\n\t\tremoveList.add(entity);\r\n\t}\r\n\t/** This can help you to access entities.add() in other class */\r\n\tpublic void addEntity(Entity entity){ entities.add(entity); }\r\n\r\n\t/**\r\n\t * Notification that the player has died.\r\n\t */\r\n\tpublic void notifyDeath(int status) {\r\n\t\tif(status == 1) {((ShipEntity)ShipCounter[0]).playerDead(); }\r\n\t\tif(status == 2) {((ShipEntity)ShipCounter[1]).playerDead(); }\r\n\t\tif(multiPlay){\r\n\t\t\tif (((ShipEntity)ShipCounter[0]).isDead() && ((ShipEntity)ShipCounter[1]).isDead()) notifyRetire();\r\n\t\t} else notifyRetire();\r\n\t}\r\n\r\n\tpublic void notifyRetire(){\r\n\t\tif (playBoard.getScore()> Integer.parseInt(globalStorage.getUserBestScore())) {\r\n\t\t\tmessage = \"Oh no!, but  New best score!\";\r\n\t\t\tresultSender(Integer.toString(playBoard.getScore()));\r\n\t\t\tkillCount = 0;\r\n\t\t\tplayBoard.scoreInit();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tmessage = \"Oh no! They got you, try again?\";\r\n\t\t\twaitingForKeyPress = true;\r\n\t\t\tisGameStart = false;\r\n\t\t\trepeatGame();\r\n\t\t\tkillCount=0;\r\n\t\t\tplayBoard.scoreInit();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Notification that the player has won since all the aliens\r\n\t * are dead.\r\n\t */\r\n\tpublic void notifyWin() {\r\n\t\tmessage = \"Well done! You Win!\";\r\n\t\tlevel++;\r\n\t\tmessage = \"level\" + level;\r\n\t\twaitingForKeyPress = true;\r\n\t\tisGameStart = false;\r\n\t\tstageRunning = false;\r\n\t\tif (level == 4) level = 1;\r\n\t}\r\n\tpublic void resultSender(String result){\r\n\t\tfirebaseTool.setUserBestScore(globalStorage.getUserID(), result);\r\n\t\tglobalStorage.setUserBestScore(result); // 베스트 스코어 업데이트\r\n\t}\r\n\tpublic void itemDrop(int x, int y){\r\n\t\tif (killCount%3 == 0 && killCount/3 >= 1){\r\n\t\t\taddEntity(new ItemEntity(this,\"sprites/itemBox.png\",x,y));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void notifyAlienKilled(Entity other, int score) {\r\n\t\t// reduce the alient count, if there are none left, the player has won!\r\n\t\t++killCount;\r\n\t\t--liveCount;\r\n\t\tplayBoard.scoreModeAdd(score);\r\n\t\titemDrop(other.getX(), other.getY());\r\n\t\tSystem.out.println(killCount);\r\n\t\tif (level == 1) {\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t} else if (level == 2) {\r\n\t\t\tif(alienCount%2 == 0){\r\n\t\t\t\tlevel2shot();\r\n\t\t\t}\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t} else if (level == 3) {\r\n\r\n\r\n\t\t\tif (liveCount == 0) {\r\n\t\t\t\tnotifyWin();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Attempt to fire a shot from the player. Its called \"try\"\r\n\t * since we must first check that the player can fire at this\r\n\t * point, i.e. has he/she waited long enough between shots\r\n\t */\r\n\tpublic void tryToFire() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif (ship.isDead()) return;\r\n\t\t// check that we have waiting long enough to fire\r\n\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.png\",ShipCounter[0].getX()+10,ShipCounter[0].getY()-30);\r\n\t\tentities.add(shot);\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\texecutorService.execute(ss);\r\n\r\n\t}\r\n\tpublic void level2shot(){\r\n\r\n\t\tint randomX = new Random().nextInt(600); // 0부터 599까지의 랜덤한 x좌표 생성\r\n\t\tAttackEntity level2Shot = new AttackEntity(this, \"sprites/shot.gif\", randomX, 100);\r\n\t\tentities.add(level2Shot);\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\t\tpublic void tryToFire2() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (ship.isDead()) return;\r\n\t\t// check that we have waiting long enough to fire\r\n\t\tif (System.currentTimeMillis() - ship.getFireTime() < ship.getFireRatio()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// if we waited long enough, create the shot entity, and record the time.\r\n\t\tship.setFireTime(System.currentTimeMillis());\r\n\t\tShotEntity shot = new ShotEntity(this, \"sprites/shot.gif\",ShipCounter[1].getX()+10,ShipCounter[1].getY()-30);\r\n\t\tentities.add(shot);\r\n\r\n\t\tExecutorService executorService = Executors.newSingleThreadExecutor();\r\n\t\tBackgroundMusic ss = new BackgroundMusic(\"src/main/resources/audio/shot.wav\", executorService);\r\n\t\texecutorService.execute(ss);\r\n\t}\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n\tpublic void gameLoop() {\r\n\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t// keep looping round til the game ends\r\n\t\twhile (gameRunning) {\r\n\t\t\t// work out how long its been since the last update, this\r\n\t\t\t// will be used to calculate how far the entities should\r\n\t\t\t// move this loop\r\n\t\t\tlong delta = SystemTimer.getTime() - lastLoopTime;\r\n\t\t\t//lastLoopTime = SystemTimer.getTime();\r\n\t\t\tlastLoopTime = SystemTimer.getTime();\r\n\t\t   /*System.out.format(\"%02d\", aMinute); System.out.print(':');\r\n\t\tSystem.out.format(\"%02d\", aSecond); System.out.print('.');\r\n\t\tSystem.out.format(\"%02d%n\", tenToHundMillis);*/\r\n\t\t\t/**\r\n\t\t\t * delta could be a second, lastLooptime is 1ms. And its count up about 10ms.\r\n\t\t\t * so we will use this class to get a live time ticks up from down 4 numbers of digits\r\n\t\t\t * */\r\n\t\t\t//System.out.println(delta+\", \"+lastLoopTime);\r\n\t\t\t// update the frame counter\r\n\t\t\tlastFpsTime += delta;\r\n\t\t\tfps++;\r\n\t\t\t// update our FPS counter if a second has passed since\r\n\t\t\t// we last recorded\r\n\t\t\tif (lastFpsTime >= 1000) {\r\n\t\t\t\tcontainer.setTitle(windowTitle+\" (FPS: \"+fps+\")\");\r\n\t\t\t\tlastFpsTime = 0;\r\n\t\t\t\tfps = 0;\r\n\t\t\t}\r\n\t\t\t// Get hold of a graphics context for the accelerated\r\n\t\t\t// surface and blank it out\r\n\t\t\tGraphics2D g = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tg.setColor(Color.black);\r\n\t\t\tg.fillRect(0,0,800,600);\r\n\t\t\t//Status HUD\r\n\t\t\tGraphics2D userHUD = (Graphics2D) strategy.getDrawGraphics();\r\n\t\t\tuserHUD.setColor(Color.white);\r\n\t\t\tuserHUD.drawString(\"Score : \"+playBoard.getScore(),(800-g.getFontMetrics().stringWidth(\"Score : \"+killCount))/2,20);\r\n\t\t\t/*userHUD.drawString(timeStamp,5,580);*/\r\n\t\t\t// cycle round asking each entity to move itself\r\n\t\t\tif (!stageRunning)createAliens();\r\n\t\t\tif (!waitingForKeyPress) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\t\tentity.move(delta);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// cycle round drawing all the entities we have in the game\r\n\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\tEntity entity = (Entity) entities.get(i);\r\n\t\t\t\tentity.draw(g);\r\n\t\t\t}\r\n\t\t\t// brute force collisions, compare every entity against\r\n\t\t\t// every other entity. If any of them collide notify\r\n\t\t\t// both entities that the collision has occured\r\n\t\t\tfor (int p=0;p<entities.size();p++) {\r\n\t\t\t\tfor (int s=p+1;s<entities.size();s++) {\r\n\t\t\t\t\tEntity me = (Entity) entities.get(p);\r\n\t\t\t\t\tEntity him = (Entity) entities.get(s);\r\n\t\t\t\t\tif (me.collidesWith(him)) {\r\n\t\t\t\t\t\tme.collidedWith(him);\r\n\t\t\t\t\t\thim.collidedWith(me);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// remove any entity that has been marked for clear up\r\n\t\t\tentities.removeAll(removeList);\r\n\t\t\tremoveList.clear();\r\n\t\t\t// if a game event has indicated that game logic should\r\n\t\t\t// be resolved, cycle round every entity requesting that\r\n\t\t\t// their personal logic should be considered.\r\n\t\t\tif (logicRequiredThisLoop) {\r\n\t\t\t\tfor (int i=0;i<entities.size();i++) {\r\n\t\t\t\t\tEntity entity = entities.get(i);\r\n\t\t\t\t\tentity.doLogic();\r\n\t\t\t\t}\r\n\t\t\t\tlogicRequiredThisLoop = false;\r\n\t\t\t}\r\n\t\t\t// if we're waiting for an \"any key\" press then draw the\r\n\t\t\t// current message\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tg.setColor(Color.white);\r\n\t\t\t\tg.drawString(message,(800-g.getFontMetrics().stringWidth(message))/2,250);\r\n\t\t\t\tg.drawString(\"Press any key\",(800-g.getFontMetrics().stringWidth(\"Press any key\"))/2,300);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tisGameStart = true;\r\n\t\t\t}\r\n\t\t\t//timeCalc();\r\n\t\t\t// finally, we've completed drawing so clear up the graphics\r\n\t\t\t// and flip the buffer over\r\n\t\t\t//g.dispose();\r\n\t\t\tstrategy.show();\r\n\t\t\t// resolve the movement of the ship. First assume the ship\r\n\t\t\t// isn't moving. If either cursor key is pressed then\r\n\t\t\t// update the movement appropraitely\r\n\t\t\t//1P Controlb\r\n\t\t\tshipControl1();\r\n\t\t\t//2P control\r\n\t\t\tshipControl2();\r\n\t\t\t// if we're pressing fire, attempt to fire\r\n\t\t\tif (firePressed) {\r\n\t\t\t\ttryToFire();\r\n\t\t\t}\r\n\t\t\tif (fire2Pressed){\r\n\t\t\t\tif(!multiPlay)return;\r\n\t\t\t\ttryToFire2();\r\n\t\t\t}\r\n\t\t\t// we want each frame to take 10 milliseconds, to do this\r\n\t\t\t// we've recorded when we started the frame. We add 10 milliseconds\r\n\t\t\t// to this and then factor in the current time to give\r\n\t\t\t// us our final value to wait for\r\n\t\t\tSystemTimer.sleep(lastLoopTime+10-SystemTimer.getTime());\r\n\r\n\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * The main game loop. This loop is running during all game\r\n\t * play as is responsible for the following activities:\r\n\t * <p>\r\n\t * - Working out the speed of the game loop to update moves\r\n\t * - Moving the game entities\r\n\t * - Drawing the screen contents (entities, text)\r\n\t * - Updating game events\r\n\t * - Checking Input\r\n\t * <p>\r\n\t */\r\n\r\n\t/*public String giveSurvivalTime() {\r\n\t\treturn String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);\r\n\t}*/\r\n\t/**\r\n\t * A class to handle keyboard input from the user. The class\r\n\t * handles both dynamic input during game play, i.e. left/right\r\n\t * and shoot, and more static type input (i.e. press any key to\r\n\t * continue)\r\n\t *\r\n\t * This has been implemented as an inner class more through\r\n\t * habbit then anything else. Its perfectly normal to implement\r\n\t * this as seperate class if slight less convienient.\r\n\t *\r\n\t * @author Kevin Glass\r\n\t */\r\n\tprivate class KeyInputHandler extends KeyAdapter {\r\n\t\t/**\r\n\t\t * The number of key presses we've had while waiting for an \"any key\" press\r\n\t\t */\r\n\t\tprivate int pressCount = 1;\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been pressed. Note that\r\n\t\t * a key being pressed is equal to being pushed down but *NOT*\r\n\t\t * released. Thats where keyTyped() comes in.\r\n\t\t *\r\n\t\t * @param e The details of the key that was pressed\r\n\t\t */\r\n\t\tpublic void keyPressed(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"press\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = true;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been released.\r\n\t\t *\r\n\t\t * @param e The details of the key that was released\r\n\t\t */\r\n\t\tpublic void keyReleased(KeyEvent e) {\r\n\t\t\t// if we're waiting for an \"any key\" typed then we don't\r\n\t\t\t// want to do anything with just a \"released\"\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_LEFT) {\r\n\t\t\t\tleftPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_RIGHT) {\r\n\t\t\t\trightPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_UP) {\r\n\t\t\t\tupPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_DOWN) {\r\n\t\t\t\tdownPressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_SPACE) {\r\n\t\t\t\tfirePressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_A) {\r\n\t\t\t\tleft2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_D) {\r\n\t\t\t\tright2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_W) {\r\n\t\t\t\tup2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_S) {\r\n\t\t\t\tdown2Pressed = false;\r\n\t\t\t}\r\n\t\t\tif (e.getKeyCode() == KeyEvent.VK_1) {\r\n\t\t\t\tfire2Pressed = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Notification from AWT that a key has been typed. Note that\r\n\t\t * typing a key means to both press and then release it.\r\n\t\t *\r\n\t\t * @param e The details of the key that was typed.\r\n\t\t */\r\n\t\tpublic void keyTyped(KeyEvent e) {\r\n\t\t\t// if we're waiting for a \"any key\" type then\r\n\t\t\t// check if we've recieved any recently. We may\r\n\t\t\t// have had a keyType() event from the user releasing\r\n\t\t\t// the shoot or move keys, hence the use of the \"pressCount\"\r\n\t\t\t// counter.\r\n\t\t\tif (waitingForKeyPress) {\r\n\t\t\t\tif (pressCount == 1) {\r\n\t\t\t\t\t// since we've now recieved our key typed\r\n\t\t\t\t\t// event we can mark it as such and start\r\n\t\t\t\t\t// our new game\r\n\t\t\t\t\twaitingForKeyPress = false;\r\n\t\t\t\t\tstartGame();\r\n\t\t\t\t\tpressCount = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpressCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if we hit escape, then quit the game\r\n\t\t\tif (e.getKeyChar() == 27) {\r\n\t\t\t\tSystem.exit(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic void keyReverse(boolean whois) {\r\n\t\tTimer timerKeyReverse = new Timer();\r\n\t\tTimerTask task = new TimerTask() {\r\n\t\t\tlong startTime = System.currentTimeMillis();\r\n\t\t\tlong durationtime = System.currentTimeMillis();\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\twhile(durationtime - startTime<5000){\r\n\t\t\t\t\tif(whois)keyP2Reverse=true;\r\n\t\t\t\t\telse keyP1Reverse=true;\r\n\t\t\t\t\tdurationtime = System.currentTimeMillis();\r\n\t\t\t\t}\r\n\t\t\t\ttimerKeyReverse.cancel();\r\n\t\t\t\tif (whois) keyP2Reverse = false;\r\n\t\t\t\telse keyP1Reverse =false;\r\n\t\t\t}\r\n\t\t};\r\n\t\ttimerKeyReverse.schedule(task, 0,10);\r\n\t}\r\n\tpublic void shipControl1() {\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[0];\r\n\t\tif(keyP1Reverse){\r\n\t\t\tLonly = 3; Ronly = 9; Uonly = 6; Donly = 12; LnD = 1; RnD = 11; LnU = 5; RnU = 7;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLonly = 9; Ronly = 3; Uonly = 12; Donly = 6; LnU = 11; LnD = 7; RnU = 1; RnD = 5;\r\n\t\t}\r\n\t\tif (leftPressed && !rightPressed && !upPressed && !downPressed) ship.movingLogic(Lonly);\r\n\t\t\t//right unique move\r\n\t\telse if (rightPressed && !leftPressed && !upPressed && !downPressed) ship.movingLogic(Ronly);\r\n\t\t\t//up unique move\r\n\t\telse if (upPressed && !downPressed && !rightPressed && !leftPressed) ship.movingLogic(Uonly);\r\n\t\t\t//down unique move\r\n\t\telse if (downPressed && !upPressed && !rightPressed && !leftPressed) ship.movingLogic(Donly);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (leftPressed && upPressed && !rightPressed && !downPressed) ship.movingLogic(LnU);\r\n\t\telse if (leftPressed && downPressed && !rightPressed && !upPressed) ship.movingLogic(LnD);\r\n\t\telse if (rightPressed && upPressed && !downPressed && !leftPressed) ship.movingLogic(RnU);\r\n\t\telse if (rightPressed && downPressed && !upPressed && !leftPressed) ship.movingLogic(RnD);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\tpublic int getAlienHoriSpeed(){\r\n\t\treturn alienHoriSpeed;\r\n\t}\r\n\tpublic void setAlienHoriSpeed(int Tgt){\r\n\t\talienHoriSpeed=Tgt;\r\n\t}\r\n\tpublic int getAlienVertSpeed(){\r\n\t\treturn alienVertSpeed;\r\n\t}\r\n\tpublic void setAlienVertSpeed(int Tgt){\r\n\t\talienVertSpeed=Tgt;\r\n\t}\r\n\tpublic void alienInvasion() {\r\n\t\tint originHoriSpeed = getAlienHoriSpeed();\r\n\t\tint originVertSpeed = getAlienVertSpeed();\r\n\t\tlong startTimer = SystemTimer.getTime();\r\n\t\tTimer timerInvasion = new Timer();\r\n\t\tint targetHoriSpeed = originHoriSpeed * 2;\r\n\t\tint targetVertSpeed = originVertSpeed * 2;\r\n\t\tTimerTask taskInvasion = new TimerTask() {\r\n\r\n\t\t\tlong durationTimer = SystemTimer.getTime();\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\twhile (durationTimer - startTimer < 5000) {\r\n\t\t\t\t\tsetAlienVertSpeed(targetHoriSpeed);\r\n\t\t\t\t\tsetAlienVertSpeed(targetVertSpeed);\r\n\t\t\t\t\tdurationTimer = SystemTimer.getTime();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\ttimerInvasion.schedule(taskInvasion, 0,500);\r\n\t\tsetAlienVertSpeed(originHoriSpeed);\r\n\t\tsetAlienVertSpeed(originVertSpeed);\r\n\t}\r\n\tpublic void shipControl2() {\r\n\t\tif(!multiPlay)return;\r\n\t\tif(keyP2Reverse){\r\n\t\t\tLonly = 3; Ronly = 9; Uonly = 6; Donly = 12; LnD = 1; RnD = 11; LnU = 5; RnU = 7;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tLonly = 9; Ronly = 3; Uonly = 12; Donly = 6; LnU = 11; LnD = 7; RnU = 1; RnD = 5;\r\n\t\t}\r\n\t\tShipEntity ship = (ShipEntity) ShipCounter[1];\r\n\t\tif (left2Pressed && !right2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(Lonly);\r\n\t\t\t//right unique move\r\n\t\telse if (right2Pressed && !left2Pressed && !up2Pressed && !down2Pressed) ship.movingLogic(Ronly);\r\n\t\t\t//up unique move\r\n\t\telse if (up2Pressed && !down2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(Uonly);\r\n\t\t\t//down unique move\r\n\t\telse if (down2Pressed && !up2Pressed && !right2Pressed && !left2Pressed) ship.movingLogic(Donly);\r\n\t\t\t//left&up degree 45\r\n\t\telse if (left2Pressed && up2Pressed && !right2Pressed && !down2Pressed) ship.movingLogic(LnU);\r\n\t\telse if (left2Pressed && down2Pressed && !right2Pressed && !up2Pressed) ship.movingLogic(LnD);\r\n\t\telse if (right2Pressed && up2Pressed && !down2Pressed && !left2Pressed) ship.movingLogic(RnU);\r\n\t\telse if (right2Pressed && down2Pressed && !up2Pressed && !left2Pressed) ship.movingLogic(RnD);\r\n\t\telse ship.movingLogic(0);\r\n\t}\r\n\t/*public static void main(String[] args) {\r\n\t\tGame g = new Game(\"1p\");\r\n\t\tg.gameLoop();\r\n\t}*/\r\n\t//추후 사용할 경우 재정비 필요. 현재 화면 HUD불가.\r\n\t/**public void timeCalc(){//time is spent even not started\r\n\t if(goGo==false)return;\r\n\t else if(player1Dead && player2Dead)return;\r\n\t tenToHundMillis = (int) ((lastLoopTime - initTime) / 10 % 100);//default time duration\r\n\t aSecond = (int) lastLoopTime / 1000 % 60;\r\n\t aMinute = (int) lastLoopTime / 60000 % 60;\r\n\r\n\t timeStamp = String.format(\"%02d\", aMinute) + \":\" + String.format(\"%02d\", aSecond) + \".\" + String.format(\"%02d\", tenToHundMillis);*/\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/spaceinvaders/Game.java b/src/main/java/spaceinvaders/Game.java
--- a/src/main/java/spaceinvaders/Game.java	(revision 8dc1fc58096efd43c5fcf55ac4fab09b253ed288)
+++ b/src/main/java/spaceinvaders/Game.java	(date 1685271849882)
@@ -460,9 +460,6 @@
 	}
 
 
-
-
-
 		public void tryToFire2() {
 		ShipEntity ship = (ShipEntity) ShipCounter[1];
 		if (ship.isDead()) return;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9a032ae6-4b29-432b-86a3-e62c7564cd2e\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/Mypage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/Mypage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/AttackEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/AttackEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/BossEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/BossEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/ShotEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/spaceinvaders/entity/ShotEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/sprites/bossAttack.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/sprites/bossAttack.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$1.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$1.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$2.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$2.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$3.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$3.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$4.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$4.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$5.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$5.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$KeyInputHandler.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game$KeyInputHandler.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Game.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Mypage.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/Mypage.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/entity/AttackEntity.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/entity/AttackEntity.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/spaceinvaders/entity/ShotEntity.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/spaceinvaders/entity/ShotEntity.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/sprites/bossAttack.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/sprites/bossAttack.png\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/java/awt/image/DataBufferInt.java\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/java/awt/image/DirectColorModel.java\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/java/awt/image/Raster.java\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/sun/awt/image/ImageDecoder.java\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/sun/awt/image/ImageFetcher.java\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"jar://$USER_HOME$/java-sdk/src.zip!/sun/awt/image/ImageRepresentation.java\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2OVaLf168Mm8Lnwnfus6t5xT0Ve\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"last_opened_file_path\": \"C:/Users/82109/IdeaProjects/space_invaders_intellij/lib/timer.dll\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"preferences.pluginManager\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"spaceinvaders.entity\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Window\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"spaceinvaders.Window\" />\r\n      <module name=\"space_invaders_intellij\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"spaceinvaders.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Window\" />\r\n        <item itemvalue=\"Application.Window\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"9a032ae6-4b29-432b-86a3-e62c7564cd2e\" name=\"Changes\" comment=\"\" />\r\n      <created>1681648173661</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1681648173661</updated>\r\n      <workItem from=\"1681648179087\" duration=\"4675000\" />\r\n      <workItem from=\"1681652874773\" duration=\"6965000\" />\r\n      <workItem from=\"1685261463605\" duration=\"6702000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"ItemClassAdded&amp;AlienGenerationRework\">\r\n      <created>1681653048856</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1681653048856</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"bgm\">\r\n      <created>1684932146339</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684932146340</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"createAlien random point rework\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"createAlien random point rework\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8dc1fc58096efd43c5fcf55ac4fab09b253ed288)
+++ b/.idea/workspace.xml	(date 1685272702191)
@@ -7,22 +7,8 @@
     <list default="true" id="9a032ae6-4b29-432b-86a3-e62c7564cd2e" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/spaceinvaders/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/spaceinvaders/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/spaceinvaders/Mypage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/spaceinvaders/Mypage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/AttackEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/AttackEntity.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/BossEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/BossEntity.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/ShotEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/spaceinvaders/entity/ShotEntity.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/sprites/bossAttack.png" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/sprites/bossAttack.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$1.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$1.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$2.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$2.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$3.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$3.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$4.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$4.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$5.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$5.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$KeyInputHandler.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game$KeyInputHandler.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Game.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/Mypage.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/Mypage.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/AttackEntity.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/AttackEntity.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/ShotEntity.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/ShotEntity.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/sprites/bossAttack.png" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/sprites/bossAttack.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/BossEntity.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/spaceinvaders/entity/BossEntity.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -70,23 +56,23 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "last_opened_file_path": "C:/Users/82109/IdeaProjects/space_invaders_intellij/lib/timer.dll",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "preferences.pluginManager",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/82109/IdeaProjects/space_invaders_intellij/lib/timer.dll&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyClassDialog.RECENTS_KEY">
       <recent name="spaceinvaders.entity" />
@@ -110,6 +96,7 @@
       <list>
         <item itemvalue="Application.Window" />
         <item itemvalue="Application.Window" />
+        <item itemvalue="Application.Window" />
       </list>
     </recent_temporary>
   </component>
@@ -123,7 +110,11 @@
       <updated>1681648173661</updated>
       <workItem from="1681648179087" duration="4675000" />
       <workItem from="1681652874773" duration="6965000" />
+      <workItem from="1685261463605" duration="7038000" />
       <workItem from="1685261463605" duration="6702000" />
+      <workItem from="1685271134672" duration="44000" />
+      <workItem from="1685271185408" duration="32000" />
+      <workItem from="1685271673517" duration="1028000" />
     </task>
     <task id="LOCAL-00001" summary="ItemClassAdded&amp;AlienGenerationRework">
       <created>1681653048856</created>
@@ -132,14 +123,14 @@
       <option name="project" value="LOCAL" />
       <updated>1681653048856</updated>
     </task>
-    <task id="LOCAL-00002" summary="bgm">
-      <created>1684932146339</created>
+    <task id="LOCAL-00002" summary="boss attack rework">
+      <created>1685268455542</created>
       <option name="number" value="00002" />
       <option name="presentableId" value="LOCAL-00002" />
       <option name="project" value="LOCAL" />
-      <updated>1684932146340</updated>
+      <updated>1685268455542</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -158,6 +149,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="createAlien random point rework" />
-    <option name="LAST_COMMIT_MESSAGE" value="createAlien random point rework" />
+    <MESSAGE value="boss attack rework" />
+    <option name="LAST_COMMIT_MESSAGE" value="boss attack rework" />
   </component>
 </project>
\ No newline at end of file
